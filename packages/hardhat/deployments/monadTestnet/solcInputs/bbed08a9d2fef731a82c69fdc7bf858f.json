{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/IplikciFinance.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract IplikciFinance is Ownable {\n    // Asset types\n    enum Asset { MON, WBTC, USDC }\n\n    // Token contracts\n    IERC20 public wbtcToken;\n    IERC20 public usdcToken;\n\n    // Rate parameters (in basis points, 10000 = 100%)\n    uint256 public supplyEarnBps = 800; // 8% APY for suppliers\n    uint256 public borrowCollateralBps = 12000; // 120% collateral required\n    uint256 public borrowFeeBps = 1000; // 10% fee on borrowed amount\n\n    // Fixed prices in USD (with 18 decimals for precision)\n    // MON = $1, WBTC = $60,000, USDC = $1\n    mapping(Asset => uint256) public assetPrices;\n\n    // User positions per asset\n    struct SupplyPosition {\n        uint256 amount;\n        uint256 timestamp;\n    }\n\n    struct BorrowPosition {\n        Asset borrowAsset;\n        Asset collateralAsset;\n        uint256 collateralAmount;\n        uint256 borrowedAmount;\n        uint256 timestamp;\n    }\n\n    // User => Asset => SupplyPosition\n    mapping(address => mapping(Asset => SupplyPosition)) public supplyPositions;\n    mapping(address => BorrowPosition) public borrowPositions;\n    mapping(address => uint256) public creditScores;\n\n    // Total supplied per asset\n    mapping(Asset => uint256) public totalSupplied;\n    mapping(Asset => uint256) public totalBorrowed;\n\n    // Events\n    event AssetSupplied(address indexed user, Asset asset, uint256 amount, uint256 creditScore);\n    event AssetWithdrawn(address indexed user, Asset asset, uint256 amount, uint256 earned);\n    event AssetBorrowed(address indexed user, Asset borrowAsset, Asset collateralAsset, uint256 collateral, uint256 borrowed, uint256 fee);\n    event LoanRepaid(address indexed user, uint256 amount, uint256 creditScore);\n\n    constructor(address _wbtc, address _usdc) Ownable(msg.sender) {\n        wbtcToken = IERC20(_wbtc);\n        usdcToken = IERC20(_usdc);\n        \n        // Set fixed prices (in USD with 18 decimals)\n        assetPrices[Asset.MON] = 1 ether; // $1\n        assetPrices[Asset.WBTC] = 60000 ether; // $60,000\n        assetPrices[Asset.USDC] = 1 ether; // $1\n    }\n\n    // HELPER FUNCTIONS\n\n    function getToken(Asset asset) internal view returns (IERC20) {\n        if (asset == Asset.WBTC) return wbtcToken;\n        if (asset == Asset.USDC) return usdcToken;\n        revert(\"Invalid asset\");\n    }\n\n    function getAssetDecimals(Asset asset) public pure returns (uint8) {\n        if (asset == Asset.MON) return 18;\n        if (asset == Asset.WBTC) return 8;\n        if (asset == Asset.USDC) return 6;\n        return 18;\n    }\n\n    function convertAssetValue(uint256 amount, Asset fromAsset, Asset toAsset) public view returns (uint256) {\n        // Convert amount from one asset to another based on prices\n        uint256 fromPrice = assetPrices[fromAsset];\n        uint256 toPrice = assetPrices[toAsset];\n        uint256 fromDecimals = getAssetDecimals(fromAsset);\n        uint256 toDecimals = getAssetDecimals(toAsset);\n        \n        // value in USD = amount * price / (10^decimals)\n        // Convert to same decimals (18) for calculation\n        uint256 valueInUSD = (amount * fromPrice * 1e18) / (10**fromDecimals * 1 ether);\n        \n        // Convert USD value to target asset\n        uint256 targetAmount = (valueInUSD * 10**toDecimals * 1 ether) / (toPrice * 1e18);\n        return targetAmount;\n    }\n\n    // SUPPLY FUNCTIONS\n\n    function supply(Asset asset, uint256 amount) public payable {\n        if (asset == Asset.MON) {\n            require(msg.value == amount && amount > 0, \"Invalid MON amount\");\n        } else {\n            require(amount > 0, \"Amount must be greater than 0\");\n            IERC20 token = getToken(asset);\n            require(token.transferFrom(msg.sender, address(this), amount), \"Transfer failed\");\n        }\n\n        SupplyPosition storage position = supplyPositions[msg.sender][asset];\n\n        // If user already has a position, add earned interest before updating\n        if (position.amount > 0) {\n            uint256 earned = calculateEarned(msg.sender, asset);\n            position.amount += earned;\n        }\n\n        position.amount += amount;\n        position.timestamp = block.timestamp;\n        totalSupplied[asset] += amount;\n\n        // Increase credit score\n        creditScores[msg.sender] += 1;\n\n        emit AssetSupplied(msg.sender, asset, amount, creditScores[msg.sender]);\n    }\n\n    function withdraw(Asset asset, uint256 amount) public {\n        SupplyPosition storage position = supplyPositions[msg.sender][asset];\n        require(position.amount > 0, \"No supply position\");\n\n        uint256 earned = calculateEarned(msg.sender, asset);\n        uint256 totalAvailable = position.amount + earned;\n\n        require(amount <= totalAvailable, \"Insufficient balance\");\n\n        // Update position\n        if (amount == totalAvailable) {\n            delete supplyPositions[msg.sender][asset];\n        } else {\n            position.amount = totalAvailable - amount;\n            position.timestamp = block.timestamp;\n        }\n\n        uint256 principalWithdrawn = amount > position.amount ? position.amount : amount;\n        totalSupplied[asset] -= principalWithdrawn;\n\n        // Transfer assets\n        if (asset == Asset.MON) {\n            require(address(this).balance >= amount, \"Insufficient contract balance\");\n            payable(msg.sender).transfer(amount);\n        } else {\n            IERC20 token = getToken(asset);\n            require(token.balanceOf(address(this)) >= amount, \"Insufficient contract balance\");\n            require(token.transfer(msg.sender, amount), \"Transfer failed\");\n        }\n\n        emit AssetWithdrawn(msg.sender, asset, amount, earned);\n    }\n\n    function calculateEarned(address user, Asset asset) public view returns (uint256) {\n        SupplyPosition memory position = supplyPositions[user][asset];\n        if (position.amount == 0) return 0;\n\n        uint256 timeElapsed = block.timestamp - position.timestamp;\n        // Simple interest calculation: (amount * rate * time) / (365 days * 10000)\n        uint256 earned = (position.amount * supplyEarnBps * timeElapsed) / (365 days * 10000);\n        return earned;\n    }\n\n    // BORROW FUNCTIONS\n\n    function borrow(Asset borrowAsset, uint256 borrowAmount, Asset collateralAsset, uint256 collateralAmount) public payable {\n        require(borrowAmount > 0, \"Borrow amount must be greater than 0\");\n        require(borrowPositions[msg.sender].borrowedAmount == 0, \"Already have active loan\");\n        require(borrowAsset != collateralAsset, \"Borrow and collateral must be different assets\");\n\n        // Convert borrow amount to collateral asset value and check 120% collateral\n        uint256 requiredCollateral = convertAssetValue(borrowAmount, borrowAsset, collateralAsset);\n        requiredCollateral = (requiredCollateral * borrowCollateralBps) / 10000;\n        require(collateralAmount >= requiredCollateral, \"Insufficient collateral\");\n\n        // Handle collateral deposit\n        if (collateralAsset == Asset.MON) {\n            require(msg.value == collateralAmount, \"Invalid MON collateral\");\n        } else {\n            IERC20 token = getToken(collateralAsset);\n            require(token.transferFrom(msg.sender, address(this), collateralAmount), \"Collateral transfer failed\");\n        }\n\n        // Calculate fee\n        uint256 fee = (borrowAmount * borrowFeeBps) / 10000;\n        uint256 amountToTransfer = borrowAmount - fee;\n\n        // Check liquidity\n        if (borrowAsset == Asset.MON) {\n            require(address(this).balance >= borrowAmount, \"Insufficient liquidity\");\n        } else {\n            IERC20 token = getToken(borrowAsset);\n            require(token.balanceOf(address(this)) >= borrowAmount, \"Insufficient liquidity\");\n        }\n\n        // Save borrow position\n        borrowPositions[msg.sender] = BorrowPosition({\n            borrowAsset: borrowAsset,\n            collateralAsset: collateralAsset,\n            collateralAmount: collateralAmount,\n            borrowedAmount: borrowAmount,\n            timestamp: block.timestamp\n        });\n\n        totalBorrowed[borrowAsset] += borrowAmount;\n\n        // Transfer borrowed amount minus fee\n        if (borrowAsset == Asset.MON) {\n            payable(msg.sender).transfer(amountToTransfer);\n        } else {\n            IERC20 token = getToken(borrowAsset);\n            require(token.transfer(msg.sender, amountToTransfer), \"Borrow transfer failed\");\n        }\n\n        emit AssetBorrowed(msg.sender, borrowAsset, collateralAsset, collateralAmount, borrowAmount, fee);\n    }\n\n    function repay() public payable {\n        BorrowPosition storage position = borrowPositions[msg.sender];\n        require(position.borrowedAmount > 0, \"No active loan\");\n\n        Asset borrowAsset = position.borrowAsset;\n        Asset collateralAsset = position.collateralAsset;\n        uint256 repayAmount = position.borrowedAmount;\n\n        // Handle repayment\n        if (borrowAsset == Asset.MON) {\n            require(msg.value >= repayAmount, \"Insufficient repayment\");\n        } else {\n            IERC20 token = getToken(borrowAsset);\n            require(token.transferFrom(msg.sender, address(this), repayAmount), \"Repay transfer failed\");\n        }\n\n        uint256 collateralToReturn = position.collateralAmount;\n        totalBorrowed[borrowAsset] -= repayAmount;\n\n        // Delete position\n        delete borrowPositions[msg.sender];\n\n        // Increase credit score\n        creditScores[msg.sender] += 2;\n\n        // Return collateral\n        if (collateralAsset == Asset.MON) {\n            payable(msg.sender).transfer(collateralToReturn);\n            // Return excess MON if overpaid\n            if (borrowAsset == Asset.MON && msg.value > repayAmount) {\n                payable(msg.sender).transfer(msg.value - repayAmount);\n            }\n        } else {\n            IERC20 token = getToken(collateralAsset);\n            require(token.transfer(msg.sender, collateralToReturn), \"Collateral return failed\");\n        }\n\n        emit LoanRepaid(msg.sender, repayAmount, creditScores[msg.sender]);\n    }\n\n    // VIEW FUNCTIONS\n\n    function getSupplyPosition(address user, Asset asset) public view returns (uint256 amount, uint256 earned, uint256 timestamp) {\n        SupplyPosition memory position = supplyPositions[user][asset];\n        return (position.amount, calculateEarned(user, asset), position.timestamp);\n    }\n\n    function getBorrowPosition(address user) public view returns (Asset borrowAsset, Asset collateralAsset, uint256 collateral, uint256 borrowed, uint256 timestamp) {\n        BorrowPosition memory position = borrowPositions[user];\n        return (position.borrowAsset, position.collateralAsset, position.collateralAmount, position.borrowedAmount, position.timestamp);\n    }\n\n    function getAvailableLiquidity(Asset asset) public view returns (uint256) {\n        if (asset == Asset.MON) {\n            return address(this).balance;\n        } else {\n            IERC20 token = getToken(asset);\n            return token.balanceOf(address(this));\n        }\n    }\n\n    // ADMIN FUNCTIONS\n\n    function setSupplyEarnBps(uint256 newRate) public onlyOwner {\n        supplyEarnBps = newRate;\n    }\n\n    function setBorrowCollateralBps(uint256 newRate) public onlyOwner {\n        borrowCollateralBps = newRate;\n    }\n\n    function setBorrowFeeBps(uint256 newRate) public onlyOwner {\n        borrowFeeBps = newRate;\n    }\n\n    function setAssetPrice(Asset asset, uint256 priceInUSD) public onlyOwner {\n        assetPrices[asset] = priceInUSD;\n    }\n\n    receive() external payable {}\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}